#+TITLE:Development Notes
* Introduction :TOC:
- [[#progress][Progress]]
- [[#research][Research]]
- [[#original-program-structure][Original Program Structure]]
  - [[#general-comments][General Comments]]
  - [[#notes][Notes]]
  - [[#definesincludes][Defines(includes)]]
  - [[#initialisation][Initialisation]]
  - [[#main-menu-loop-interfacec][Main Menu Loop (interface.c)]]
  - [[#game-loop][Game Loop]]
  - [[#graphics][Graphics]]
  - [[#graphics-objects-srcdisplayobjects][Graphics Objects (src/display/objects)]]
  - [[#header-file-dependencies][Header file dependencies]]
  - [[#game-state-settings][Game State (Settings)]]
  - [[#maze][Maze]]

* Progress
Not much at this stage.

* Research
Programs in /research/ are used to implement, test and evaluate 
various parts of the program.

- /xtank-dlopen/ :: Compile and load a separate program (using *dlopen*), used for
  implementing additional modules. (eg. robot programs, HUD improvements)

- /xtank-pixbuf/ :: Experiment for writing pixbuf images to Gtk4 buffer.
  
- /example-dlopen/ :: A *dlopen* example.

- /example-dlopen/ :: A *gmodule* example. GModule 2.0 is the Portable GLib API for
  dynamically loading modules. 

* Original Program Structure

** General Comments
The following are some idisyncratic features of the xtank code from the original
authors. Not quite easter eggs.

- rorre() :: Function used when getting an error and program can't continue.
  Macro defined in [[src/include/common.h:74]]

- #ifdef REALLY_RUDE :: Only one instance, but adds an additional help message. 

** Notes
- (CLFkr) ConfigRunning, command_options :: Structure used to contain
  configuration. Initially stored in *command_options* in main.c, with settings
  loaded from command line options. Defined in *clfkr.h*

#+begin_src C 
  Boolean AutoExit;	 // Exit immediately after running
  Boolean AutoStart;	 // Skip the main menu and begin
                       // execution automatically?
  Boolean UseSetting;	 // Use a settings file specified
                       // on the command line?
  Boolean PrintScores; // Print scores to standard out after
                       // running a game?
  char *Settings;		 // File from which to load settings.
  Boolean NoDelay;	 // Skip all pauses during gameplay?
  Boolean NoIO;		 // Skip all screen I/O?
#+end_src

- (BSet) bset :: Bullet Set - structure containing data of current bullets in an
  array, and an array/list of pointers to these bullets. *MAX_BULLETS* defined in
  *tanklimits.h.*
  
- (Eset) eset :: Explosion Set - similar structure to handle bullets. *MAX_EXPS*
  defined in *tanklimits.h*.

- (Maze) maze :: Structure which stores vehicle starting location (*Coord*), by
  team. Defined in maze.h.

- Vehicle Arrays :: *actual_vehicles*, **live_vehicles*, **dead_vehicles*, num_veh,
  num_veh_alive, num_veh_dead. The arrays live_vehicles, dead_vehicles are
  pointers into the *actual_vehicles*. Permanently 'dead' vehicles leave holes in
  *actual_vehicles*.

Game Grid - MAX_GRIDS x MAX_VEHICLES
- grid_entries[] :: Array of column name in game grid
- (Byte) grid_val[][] ::
- (char *) grid_ent[][] ::
- (int) grid_id[] ::
  
- players_entries ::
- vehicles_entries ::
- teams_entries ::
Player Details/Combatants
- (Combatant) combatant[MAX_VEHICLES] :: Structure defined in *vehicle.h*, global
  variable defined in *setup.c*.
  - int num_players - 1 (player) or 0 (robot)
  - int player[] - ??? - Setup uses player[0] to contain combatant number. Was
    xtank written to support multiple players per tank?
  
** Defines(includes)
- xtank.h :: Contains a bunch of useful defines. (Includes screen.h, vdesc.h,
  xtanklib.h)

  What are TEST_TURRETS?

- proto.h :: Function prototypes. In the original code this header file
  contained all of the function prototypes for files except for *lowlib*, *highlib*
  (in lowlib).

  Uses a macro *P_* to remove additional parenthesis in the declarations. Why?

  #+begin_src C
#if 1 || defined(__STDC__) || defined(__cplusplus)
#define P_(s) s
#else
#define P_(s) ()
#endif
#+end_src

- maze.h :: Data structures for storing descriptive maze information. Requires
  'teams.h', 'tanklimits.h' to be defined first as it uses *MAX_TEAMS*,
  *MAX_VEHICLES*.

** Initialisation
- init_changed_boxes :: Should be called at the beginning of each frame

- set_terminal() :: Set's the current terminal number.

- get_player_info() :: Prompt a player for their name, and vehicle name (which
  needs to exist).
  
** Main Menu Loop (interface.c)
- main_interface(void) :: Called from main.c to start program. Declared in *proto.h*, defined in *interface.c.*
- set_terminal(0) ::
- init_interface() ::

- fix_combantants(i) (SIC) :: Put player into game grid. Uses *grid_ent*, *grid_val,*
  *players_entries*, *vehicles_entries*, *teams_entries*.

- button_up() ::
- follow_mouse() ::
- display_file() ::
- display_title() ::
- display_settings() ::

- win_exposed() ::
- get_events() :: Get events to process in main event loop.

- menu_hit() ::
- erase_other_menus() :: 
- menu_hit_p() :: Return menu choice by comparing event location (ev.x, ev.y).

- sub_interface_main() ::
- sub_interface_main() ::
- sub_interface_load() ::
- sub_interface_design() ::
- sub_interface_help() ::
- display_settings() ::
- menu_unhighlight() ::
- remove_player() ::
- expose_win() ::
- do_view() ::
- sub_interface_machine() ::
- sub_interface_play() :: See game loop
- sub_interface_settings() ::
- sub_interface_flags() ::
- sub_interface_force() ::
    
- menu_display(Menu_int *menuobj, int menuid) ::  

** Game Loop
- sub_interface_play() :: Choose the type of game to start. Standard, player,
  robots or customize.
Game setups
- standard_combatants() ::  Sets up a combatant for each player and 5 + difficulty/2 robots.
- player_combatants() ::
- robot_combatants() ::
- customized_combatants() ::
- interface_play() ::
- menu_unhighlight() ::

** Graphics
Defines
- ANIM_WIN :: Window id that shows graphics
- HELP_WIN :: Window id that displays help
Globals
- box_type_name[] :: Landmark names  
Functions
- clear_window() ::
- draw_filled_rect() ::
- draw_text() :: Put text on the screen
- draw_objs() ::
- draw_obj() ::
- draw_picture_string() ::
- draw_picture() ::
- draw_text_left() ::

*Note:* Documentation on *gdk-pixbuf* can be found here -  [[https://www.manpagez.com/html/gdk-pixbuf/gdk-pixbuf-2.36.0/gdk-pixbuf-Scaling.php#gdk-pixbuf-rotate-simple]]

** Graphics Objects (src/display/objects)

The data for graphical objects are stored in a split C data structure, eg. *(Object) medusa_obj* and *(unsigned char) medusa_bitmap[]*, which store meta data and bitmap data respectively.  

Types
- Object :: Screen object, top level data structure
#+begin_src C
  typedef struct {
      char type[MAX_STRING]; // type of object
      int num_pics;          // number of pictures in the screen object
      Picture *pic;			 // array of pictures of the object
      int num_turrets;		 // number of turrets in object
      int num_segs;			 // number of segments to represent object
      Picinfo *picinfo;		 // structure with arrays for turrent locations and collision boundry
  } Object;
#+end_src
  
  Example
#+begin_src C
    #define lightc_views 16
  
    static Object lightc_obj = {
      "lightc",
      lightc_views,
      lightc_pic,
      0,			// num_turrets 
      4,			// num_segs 
      lightc_picinfo
  };

#+end_src
- Picinfo :: The Segment array defines a polygon of the object outline. Used for
  collision detection
#+begin_src C
  typedef struct {
	  Coord turret_coord[MAX_TURRETS];	// relative to center 
	  Segment segment[MAX_SEGMENTS];	// polygon shaped to the picture 
  }
#+end_src
- Picture :: Details of bitmap image. Used to decode raw data in *_pixmap*.
  #+begin_src C
    typedef struct {
        int width;
        int height;
        int offset_x;
        int offset_y;
        int pixmap;
    } Picture;
  #+end_src

- (unsigned char **) pixmap data :: An array of pointers into pixmap arrays, one
  for each picture of the object.

  To decode the *medusa* data stored in *medusa_obj* and *medusa_bitmap[]*, use:
  #+begin_src C
    int pic = 0;  // Picture to extract

    Object *object      = &medusa_obj;
    Picture *picture    = &object->pic[pic];
    unsigned char *data = medusa_bitmap[pic];

    // Object bitmap data is stored as single bit (mono), 8 bit, little-endien, with
    // rows padded to the next byte boundry (byte width).

    int w = picture->width;
    int h = picture->height;
    int byte_width = w/8;
    if (w%8 != 0) byte_width++; // Adjust width to match data

    fprintf(stderr, " w: %d (%d)  h: %d\n", w, byte_width, h);

    for (int j=0; j<h; j++){
        fprintf(stderr, " ");
        for(int i=0; i<w; i++){
            int byte = byte_width*j + i/8;
            int bit  = i%8;

            if (data[byte] & 1<<bit) {
                fprintf(stderr, "*");

            } else {
                fprintf(stderr, " ");
            }

        }
        fprintf(stderr, "\n");
    }


  #+end_src

  #+begin_example
 w: 45 (6)  h: 41
       ******                                 
     **********                               
    ***     ****                              
   **         ***                             
  **           ***                            
  **           ****                           
 **             *****                         
 **             *******                       
 **      *      *********                     
 **             **  *******                   
 **             **   *********                
 ***           **     **************          
  **           **      *****************      
  ***         **       **      ***********    
   ****     *****     ***      ****     ***   
   ***************    **      ***         **  
    ***************  ***      **           ** 
    **********  **** **      ***           ** 
    ********     ******      **             **
     *****        *************             **
     ****          ************      *      **
     *****        *************             **
    ********     ******      **             **
    **********  **** **      ***           ** 
    ***************  ***      **           ** 
   ***************    **      ***         **  
   ****     *****     ***      ****     ***   
  ***         **       **      ***********    
  **           **      *****************      
 ***           **     **************          
 **             **   *********                
 **             **  *******                   
 **      *      *********                     
 **             *******                       
 **             *****                         
  **           ****                           
  **           ***                            
   **         ***                             
    ***     ****                              
     **********                               
       ******                                 
  #+end_example

** Header file dependencies
When compiling, the header files are required with the following dependencies.
This reflects the order that header files are requested for the first time. This
list will change if the order the file *#includes* are changed in the source files.

#+begin_src ascii
main.char
- xtank.h
  - screen.h
  - vdesc.h
    - tanktypes.h
      - sysdep.h
    - tanklimits.h
    - vehicleparts.h
      - special-defs.h
      - tread-defs.h
    - object.h
  - xtanklib.h
    - map.h
    - common.h
    - message.h
    - team.h
    - game.h
    - program.h
    - settings.h
      - maze.h
    - lowlib.h
- bullet.h
  - vehicle.h
    - special.h
- clfkr.h
- proto.h
  - mdesign.h
  - setup.h
  - terminal.h
  - graphics.h
    - x11.h
  - thread.h
#+end_src

** Game State (Settings)
Data strctures

#+begin_src C
  typedef struct {
      int game_speed;           // max. number of frames per second
      Mdesc *mdesc;             // pointer to maze description 
      int maze_density;         // % of walls kept in random maze (0 - 100)
      Boolean point_bullets;    // whether bullets are points or pictures 
      Boolean commentator;      // whether commentator will comment on game
      Boolean robots_dont_win;  // whether robots can win a game
      Boolean max_armor_scale;  // scales armor to max instead of per side 
      int difficulty;           // difficulty of enemy robots (0 - 10)
      Settings_info si;         // lots of other info that is made available to
                                // robot players
  } Settings;
#+end_src

#+begin_src C
  typedef struct {
      Game game;                     // combat, war, ultimate, capture, race
      Boolean ricochet;              // whether bullets bounce off walls 
      Boolean rel_shoot;             // whether shooter's speed added to bullet's
      Boolean no_wear;               // whether vehicles take damage & lose fuel
      Boolean restart;               // whether vehicles restart after death
      Boolean full_map;              // whether vehicles start out with full map
      Boolean pay_to_play;           // whether vehicles have to "pay to play"
      Boolean no_nametags;           // whether vehicles are anonymous
      Boolean team_score;            // whether to use team scoring
      Boolean player_teleport;       // whether players can teleport
      Boolean disc_teleport;         // whether discs can teleport
      Boolean teleport_from_team;    // whether we can teleport from
                                     // team teleports 
      Boolean teleport_from_neutral; // whether we can teleport from
                                     // neutral teleports
      Boolean teleport_to_team;      // whether we can teleport to
                                     // team teleports
      Boolean teleport_to_neutral;   // whether we can teleport to
                                     // neutral teleports
      Boolean teleport_any_to_any;   // if set, every player can use
                                     // every team's teleports, but
                                     // pairs of equal coloured */
                                     // teleports must still be used -
                                     // for example, a green teleport
                                     // will never teleport to a blue
                                     // one, only to either a neutral
                                     // one or another green one.
      Boolean war_goals_only;        // in Warfare, only goals are counted
      Boolean relative_disc;         // relative speeds are used for disc damage
      Boolean ultimate_own_goal;     // in Ultimate, must score in own goal
      int winning_score;             // score needed to win the game
      int takeover_time;             // how long you have to be in a square in order
                                     // to capture it (in War game)
      int outpost_strength;          // firepower of outposts (0-10)
      int shocker_walls;             // how much extra damage walls do (0-10)
      FLOAT scroll_speed;            // speed of scroll boxes (0-10)
      FLOAT slip_friction;           // friction in slip boxes (0-1)
      FLOAT normal_friction;         // friction in all other boxes (0-1)
      FLOAT disc_friction;           // friction factor applied to disc (0-1)
      FLOAT disc_speed;              // throwing speed of the disc (0-1)
      FLOAT disc_damage;             // damage done by disc when caught (0-1)
      FLOAT disc_heat;               // amount of heat generated by disc (0-1)
      FLOAT box_slowdown;            // slowdown caused by slow boxes (0-1)
      FLOAT owner_slowdown;          // how much to slow down disc owner (0-1)
      int num_discs;                 // How many discs in the madman game (1-10)
  } Settings_info;
#+end_src

** Maze
File: maze.c / maze.h

- setup_maze() ::
- make_maze() ::
- make_random_maze_walls() ::
- remove_walls() ::
- process_maze() ::

Data structures
- Mdesc ::
  #+begin_src C
    typedef struct {
        Game type;
        char *name;
        char *designer;
        char *desc;
        Byte *data;     // maze data 
    } Mdesc;
  #+end_src

- Maze maze ::
  #+begin_src C
    typedef struct {
        int num_starts[MAX_TEAMS]; // number of start locs for each team 
        Coord start[MAX_TEAMS][MAX_VEHICLES]; // coordinates of starting locations
    } Maze;
  #+end_src

- Box :: defined in xtanklib.h
  #+begin_src C
    typedef struct {
        Flag flags;         // bits for walls, inside maze, etc.
        LandmarkType type;  // landmark, scroll, goal, outpost, etc.
        Team team;          // number of team that owns the box
        Byte teleport_code; // teleport serial number
        Byte strength;      // strength of the scroll, outpost, etc.
        void *user_data;    // robot programs can do whatever they want
                            // with this
      } Box;

    typedef Box Map[GRID_WIDTH][GRID_HEIGHT];
  #+end_src

  #+begin_src C
    typedef unsigned int Flag;	// flags for Box type

    // Flags for boxes in a maze description
    #define INSIDE_MAZE     (1<<0)
    #define NORTH_WALL      (1<<1)
    #define WEST_WALL       (1<<2)
    #define NORTH_DEST      (1<<3)
    #define WEST_DEST       (1<<4)
    #define TYPE_EXISTS     (1<<5)
    #define TEAM_EXISTS     (1<<6)
    #define EMPTY_BOXES     (1<<7)
    #define MAZE_FLAGS      (INSIDE_MAZE|NORTH_WALL|WEST_WALL|NORTH_DEST|WEST_DEST)
  #+end_src

  #+begin_src C
    // the different types of terrain boxes can have
    typedef enum {
        BAD_MAPPER = BAD_VALUE, // you don't have a mapper!
        NORMAL = 0,             // nothing unusual 
        FUEL,                   // fuel depot 
        AMMO,                   // ammunition depot 
        ARMOR,                  // armor depot 
        GOAL,                   // goal for race and ultimate games, by team 
        OUTPOST,                // shoots at vehicles, by team
        PEACE,                  // protection from damage, by team 
        TELEPORT,               // teleport 
        SCROLL_N,               // north scrolling 
        SCROLL_NE,              // northeast scrolling 
        SCROLL_E,               // east scrolling 
        SCROLL_SE,              // southeast scrolling
        SCROLL_S,               // south scrolling
        SCROLL_SW,              // southwest scrolling
        SCROLL_W,               // west scrolling
        SCROLL_NW,              // northwest scrolling
        SLIP,                   // slippery
        SLOW,                   // slowdown
        START_POS,               // vehicle starting position, by team
        real_NUM_LANDMARK_TYPES, // wall symbols, used inside Xtank only
        NORTH_SYM,               // indestructible
        WEST_SYM,
        NORTH_DEST_SYM,          // destructible
        WEST_DEST_SYM
    } LandmarkType;

    #define NUM_LANDMARK_TYPES ((int) real_NUM_LANDMARK_TYPES)
  #+end_src

  *Note:* RDF - Radio Direction Finding
